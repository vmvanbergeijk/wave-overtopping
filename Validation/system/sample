/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1806                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    location        system;
    object          sampleDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

type sets;  // define type here

// Set output format : choice of
//      xmgr
//      jplot
//      gnuplot
//      raw
setFormat raw;

// Surface output format. Choice of
//      null        : suppress output
//      foam        : separate points, faces and values file
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//
// Note:
// other formats such as obj, stl, etc can also be written (by proxy)
// but without any values!
surfaceFormat vtk;

// interpolationScheme. choice of
//      cell          : use cell-centre value only; constant over cells (default)
//      cellPoint     : use cell-centre and vertex values
//      cellPointFace : use cell-centre, vertex and face values.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPointFace;

// Fields to sample.
fields
(
	alpha.water
	U
	V
	total(p)
);


// Set sampling definition: choice of
//      uniform             evenly distributed points on line
//      face                one point per face intersection
//      midPoint            one point per cell, inbetween two face intersections
//      midPointAndFace     combination of face and midPoint
//
//      curve               specified points, not nessecary on line, uses
//                          tracking
//      cloud               specified points, uses findCell
//
// axis: how to write point coordinate. Choice of
// - x/y/z: x/y/z coordinate only
// - xyz: three columns
//  (probably does not make sense for anything but raw)
// - distance: distance from start of sampling line (if uses line) or
//             distance from first specified sampling point
//
// type specific:
//      uniform, face, midPoint, midPointAndFace : start and end coordinate
//      uniform: extra number of sampling points
//      curve, cloud: list of coordinates
sets
(

    PW1
    {
        type        midPoint;
        axis        y;

	start   (1.00 5.4 0);
	end     (1.00 6.0 0);
    }

    PW2
    {
        type        midPoint;
        axis        y;

	start   (2.00 5.4 0);
	end     (2.00 6.0 0);
    }

    PW3
    {
        type        midPoint;
        axis        y;

	start   (2.95 5.2 0);
	end     (2.95 5.8 0);
    }

    PW4
    {
        type        midPoint;
        axis        y;

	start   (3.95 4.9 0);
	end     (3.95 5.5 0);
    }

    PW5
    {
        type        midPoint;
        axis        y;

	start   (4.85 4.6 0);
	end     (4.85 5.2 0);
    }

    PW6
    {
        type        midPoint;
        axis        y;

	start   (5.8 4.2 0);
	end     (5.8 4.8 0);
    }

    PW7
    {
        type        midPoint;
        axis        y;

	start   (6.75 3.9 0);
	end     (6.75 4.5 0);
    }

    PW8
    {
        type        midPoint;
        axis        y;

	start   (15.3 1.0 0);
	end     (15.3 1.6 0);
    }

    pressure2
    {
        type        midPoint;
        axis        y;

	start   (11 2.6 0);
	end     (11 3.2 0);
    }

    pressure4
    {
        type        midPoint;
        axis        y;

	start   (15.65 1.0 0);
	end     (15.65 1.6 0);
    }

    teen1
    {
        type        midPoint;
        axis        y;

	start   (22 0 0);
	end     (22 2 0);
    }

    teen2
    {
        type        midPoint;
        axis        y;

	start   (22.5 0 0);
	end     (22.5 2 0);
    }

    teen3
    {
        type        midPoint;
        axis        y;

	start   (23 0 0);
	end     (23 2 0);
    }
);


// Surface sampling definition: choice of
//      plane : values on plane defined by point, normal.
//      patch : values on patch.
//
// 1] patches are not triangulated by default
// 2] planes are always triangulated
// 3] iso-surfaces are always triangulated
surfaces ();

// *********************************************************************** //
